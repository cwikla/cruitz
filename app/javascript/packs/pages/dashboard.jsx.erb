import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { 
  render 
} from 'react-dom';

import {
  createStore,
  applyMiddleware
} from 'redux';

import {
  Provider
} from 'react-redux';

import Pyr from '../pyr/pyr';

import Container, { Row, Column, ColumnHalf } from './container';
import Sidebar from './side_bar';
import JobsPage from './jobs/jobs_page';
import CandidatesPage, {CandidateSideButton} from './jobs/candidates_page';
import RecruitersPage from './recruiters_page';
import SettingsPage from './settings_page';
import MessagesPage from './messages_page';

const JOBS_PAGE = 'Jobs';
const CANDIDATES_PAGE = 'Candidates';
const RECRUITERS_PAGE = 'Recruiters';
const SETTINGS_PAGE = 'Settings';
const MESSAGES_PAGE = 'Messages';

const JOBS_URL = "/jobs";

function same(a,b) {
  return a.uuid == b.uuid;
}

class DashboardContainer extends Component {
  constructor(props) {
    super(props);

    this.state = {
      openPage: CANDIDATES_PAGE,
      jobs: [],
      job: (this.props.jobs ? this.props.jobs[0] : null)
    };

    this.onJobClicks = [];

    this.onJobIndex = this.jobIndex.bind(this);
    this.onJobCreate = this.jobCreate.bind(this);
    this.onJobUpdate = this.jobUpdate.bind(this);
    this.onJobDelete = this.jobDelete.bind(this);

    this.onSetPageMessages = this.setPage.bind(this, MESSAGES_PAGE);
    this.onSetPageJobs = this.setPage.bind(this, JOBS_PAGE);
    this.onSetPageCandidates = this.setPage.bind(this, CANDIDATES_PAGE);
    this.onSetPageRecruiters = this.setPage.bind(this, RECRUITERS_PAGE);
    this.onSetPageSettings = this.setPage.bind(this, SETTINGS_PAGE);
  }

  title() {
    return (this.state.openPage == CANDIDATES_PAGE) ? (this.state.job ? this.state.job.title : CANDIDATES_PAGE) : this.state.openPage;
  }

  setPage(page, e) {
    //alert(page);
    if (e) {
      e.preventDefault();
    }

    this.setState({
      job: null,
      openPage: page
    });
  }

  getJobs() {
    $.getJSON({
      type: Pyr.Method.GET,
      url: JOBS_URL,
      context: this
    }).done(function(data, textStatus, jaXHR) {
        this.onJobIndex(data.jobs);
    }).fail(function(jaXHR, textStatus, errorThrown) {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  componentDidMount() {
    this.getJobs();
  }

  same(j1, j2) {
    return j1.uuid == j2.uuid;
  }

  bindClicks(jobs, f) {
    this.onJobClicks = [];
    for(let item of jobs) {
      this.onJobClicks.push(f.bind(this, item));
    }
  }

  componentWillUpdate(nextProps, nextState) {
    if (this.state.jobs != nextState.jobs) {
      this.bindClicks(nextState.jobs, this.selectJob);
    }
  }

  jobIndex(jobs) {
    this.setState({
      jobs
    });
  }

  jobCreate(job) {
    let newJobs = (this.state.jobs || []).slice();
    newJobs.push(job);

    this.onJobIndex(newJobs);
  }

  jobUpdate(job) {
    let newJobs = this.state.jobs.map((item) => {
      if (same(item, job)) {
        return job;
      }
      return item;
    });
    this.onJobIndex(newJobs);
  }

  jobDelete(job) {
    let pos = this.state.jobs.findIndex((item) => {
       return same(item, job);
    });
    if (pos) {
      let newJobs = this.state.jobs.slice(0, pos) + this.state.jobs.slice(pos+1);
      this.onJobIndex(newJobs);
    }
  }

  selectJob(job, e) {
    //alert("SELECT JOB");
    if (e) {
      e.preventDefault();
    }

    this.setState({
      openPage: CANDIDATES_PAGE,
      job: job
    });
  }

/*
  render_old() {
    return (
      <div className="red flx-row flx-stretch s1">
        <div className="flx-1 flx-col flx-stretch cyan">
          <div className="flx-1 flx-col flx-stretch green">
            <div className="flx-1 flx-row flx-stretch pink">
              <ColumnHalf className="white">
                One
              </ColumnHalf>
              <ColumnHalf className="blue">
                Two
              </ColumnHalf>
            </div>
          </div>
        </div>
        <div className="flx-1 flx-col flx-stretch grey">
          <div className="yellow flx-1">
            Bye
          </div>
        </div>
      </div>
    );
  }
*/

  renderSideBar() {
    let self = this;

    let jobKids = this.state.jobs.map( (child, pos) => {
        return (<Sidebar.Button 
                  key={child.uuid} 
                  selected={this.state.job && same(this.state.job, child)} 
                  onClick={this.onJobClicks[pos]}>#{child.id} <span className="hidden-sm-down">{child.title}</span></Sidebar.Button>
        );
      }
    );


    return (
        <Sidebar.Main {...this.props} className="col col-1 col-sm-1 col-md-2 flx-col-stretch flx-1">
          <Sidebar.Header 
            id="messages"
            icon="envelope-o"
            onClick={this.onSetPageMessages}
            selected={this.state.openPage==MESSAGES_PAGE}
            >Messages</Sidebar.Header>

          <Sidebar.Header 
            id="jobs" 
            icon="bullseye"
            onClick={this.onSetPageJobs}
            selected={this.state.openPage==JOBS_PAGE}
          >Jobs ({this.state.jobs.length})</Sidebar.Header>

          <Sidebar.Header
            className="hidden-md-up"
            id="per-jobs"
            icon="hashtag"
            onClick={this.onSetPageCandidates}
            selected={this.state.job != null}
          />
          <div className="flx-col-stretch flx-1 hidden-sm-down">
            <Sidebar.Menu>
              {jobKids}
            </Sidebar.Menu>
          </div>

          <Sidebar.Header 
            id="recruiters"
            icon="users"
            onClick={this.onSetPageRecruiters}
            selected={this.state.openPage==RECRUITERS_PAGE}
          >Recruiters</Sidebar.Header>
          <Sidebar.Header 
            id="settings"
            icon="gear"
            onClick={this.onSetPageSettings}
            selected={this.state.openPage==SETTINGS_PAGE}
          >Settings</Sidebar.Header>
        </Sidebar.Main>
    );
  }

  renderMain() {
    let mainTitle = this.title();
    return (
        <main 
          className="col col-11 offset-1 col-sm-11 offset-sm-1 col-md-10 offset-md-2 flx-col-stretch flx-1 main-page" 
          id="main-page"
        >
          <div className="main-title">{mainTitle}</div>
          <div className="flx-col-stretch flx-1">
            <MessagesPage {...this.props.messagePageProps} showing={this.state.openPage==MESSAGES_PAGE} />
            <JobsPage 
               {...this.props.jobsPageProps} 
              showing={this.state.openPage==JOBS_PAGE} 
              items={this.state.jobs}
              onJobCreate={this.onJobCreate}
              onJobUpdate={this.onJobUpdate}
              onJobDelete={this.onJobDelete}
            />
            <CandidatesPage 
              {...this.props.candidatePageProps} 
              job={this.state.job || (this.state.jobs ? this.state.jobs[0] : nul)} 
              showing={this.state.openPage==CANDIDATES_PAGE} 
            />
            <RecruitersPage 
              {...this.props.recruiterPageProps} 
              showing={this.state.openPage==RECRUITERS_PAGE} 
            />
            <SettingsPage 
              {...this.props.settingsPageProps} 
              showing={this.state.openPage==SETTINGS_PAGE} 
            />
          </div>
        </main>
    );
  }

  render() {
    //alert(this.state.openPage == CANDIDATES_PAGE);

    return(
      <div className="flx-row-stretch flx-1">
        { this.renderSideBar() }
        { this.renderMain() }
      </div>
    );
  }
}

const Footer = (props) => (
  <div>Footer {props.name}!</div>
);

///
/// 
///

let store = createStore((state) => { return state; })

render(
  <Provider store={store}>
    <DashboardContainer />
  </Provider>,
  document.getElementById('react-container')
);
