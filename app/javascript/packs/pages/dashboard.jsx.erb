import React, {
  Component,
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { 
  render 
} from 'react-dom';

import {
  Provider
} from 'react-redux';

import Pyr from '../pyr/pyr';

import Sidebar from './side_bar';
import JobsPage from './jobs/jobs_page';
import CandidatesPage from './candidates/candidates_page';
import MessagesPage from './messages/messages_page';
import RecruitersPage from './recruiters/recruiters_page';
import SettingsPage from './settings_page';

const JOBS_PAGE = 'Jobs';
const CANDIDATES_PAGE = 'Candidates';
const RECRUITERS_PAGE = 'Recruiters';
const SETTINGS_PAGE = 'Settings';
const MESSAGES_PAGE = 'Messages';
const SEARCH_PAGE = "Search";

const JOBS_URL = "/jobs";
const USERS_URL = "/users";
const SEARCH_URL = "/search";
const RECRUITERS_URL = "/recruiters";

function PageURL(page) {
  return Pyr.URL().push(page);
}

function same(a,b) {
  return a.id == b.id;
}

class JobTitle extends Component {
  render() {
    return (
      <div className="job-title">
        <Pyr.Grid.Row>
          <Pyr.Grid.ColFull><span className="title">{this.props.job.title}</span></Pyr.Grid.ColFull>
        </Pyr.Grid.Row>
        <Pyr.Grid.Row>
          <Pyr.Grid.ColHalf>Candidates: <span>()</span></Pyr.Grid.ColHalf>
          <Pyr.Grid.ColHalf>Created: <span>{this.props.job.created_at}</span></Pyr.Grid.ColHalf>
        </Pyr.Grid.Row>
        <Pyr.Grid.Row>
          <Pyr.Grid.ColHalf>Search: <span>[         ]</span></Pyr.Grid.ColHalf>
          <Pyr.Grid.ColHalf>Filter: <span>[ ]</span></Pyr.Grid.ColHalf>
        </Pyr.Grid.Row>
      </div>
    );
  }
}

const UserLabel = (props) => (
  <div className="nav-item"><Pyr.Icon name="user" /> <Pyr.SmallLabel>{props.user ? props.user.first_name : ""}</Pyr.SmallLabel></div>
);


class Dashboard extends Pyr.UserComponent {
  constructor(props) {
    super(props);

    this.state = {
      page: MESSAGES_PAGE,
      action: null,
      jobs: [],
      job: (this.props.jobs ? this.props.jobs[0] : null),
      loading: true,
      buttonItemCount: {}
    };

    this.onJobClicks = {};

    this.onJobIndex = this.jobIndex.bind(this);
    this.onJobCreate = this.jobCreate.bind(this);
    this.onJobUpdate = this.jobUpdate.bind(this);
    this.onJobDelete = this.jobDelete.bind(this);

    this.onSetPageMessages = this.setPage.bind(this, MESSAGES_PAGE);
    this.onSetPageJobs = this.setPage.bind(this, JOBS_PAGE);
    this.onSetPageCandidates = this.setPage.bind(this, CANDIDATES_PAGE);
    this.onSetPageRecruiters = this.setPage.bind(this, RECRUITERS_PAGE);
    this.onSetPageSettings = this.setPage.bind(this, SETTINGS_PAGE);
    this.onSetAction = this.setAction.bind(this);
    this.onSetUnaction = this.setAction.bind(this, null);
    this.onSetButtonCount = this.setButtonCount.bind(this);

    this.onLoading = this.setLoading.bind(this);
  }

  userChange(user) {
    console.log("User Change: " + JSON.stringify(user));
  }

  title() {
    return (this.state.page == CANDIDATES_PAGE) ? (this.state.job ? this.state.job.title : CANDIDATES_PAGE) : this.state.page;
  }

  setButtonCount(page, count=0) {
    console.log("BUTTON COUNT: " + page + ":" + count);
    let buttonItemCount = Object.assign({}, this.state.buttonItemCount);
    buttonItemCount[page] = count;

    this.setState({
      buttonItemCount
    });
  }

  setAction(action, e) {
    if (e) {
      e.preventDefault();
    }

    this.setState({
      action
    });
  }

  setPage(page, e) {
    //alert(page);
    if (e) {
      e.preventDefault();
    }

    let newState = {};

    if (page != this.state.page) {
      newState.action = null;
      newState.job = null;
    }

    this.setState(Object.assign(newState, {
        page
      })
    );
  }

  setLoading(loading=true) {
    //alert("SETLOADIN: " + loading);
    this.setState({loading});
  }

  getJobs() {
    Pyr.getJSON({
      type: Pyr.Method.GET,
      url: PageURL(JOBS_PAGE),
      context: this,
      loading: this.onLoading,
    }).done(function(data, textStatus, jaXHR) {
        this.onJobIndex(data.jobs);
    }).fail(function(jaXHR, textStatus, errorThrown) {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  componentDidMount() {
    this.getJobs();
  }

  same(j1, j2) {
    return j1.id == j2.id;
  }

  bindClicks(jobs, f) {
    this.onJobClicks = {};
    for(let item of jobs) {
      this.onJobClicks[item.id] = f.bind(this, item);
    }
  }

  componentWillUpdate(nextProps, nextState) {
    if (this.state.jobs != nextState.jobs) {
      this.bindClicks(nextState.jobs, this.selectJob);
    }
  }

  jobIndex(jobs) {
    let buttonItemCount = Object.assign({}, this.state.buttonItemCount);
    buttonItemCount[JOBS_PAGE] = jobs.length;

    buttonItemCount[CANDIDATES_PAGE] = jobs.reduce((sum, job) => {
      return sum + job.candidate_count;
    }, 0);

    this.setState({
      buttonItemCount,
      jobs
    });
  }

  jobCreate(job) {
    let newJobs = (this.state.jobs || []).slice();
    newJobs.push(job);

    this.onJobIndex(newJobs);
  }

  jobUpdate(job) {
    let newJobs = this.state.jobs.map((item) => {
      if (same(item, job)) {
        return job;
      }
      return item;
    });
    this.onJobIndex(newJobs);
  }

  jobDelete(job) {
    let pos = this.state.jobs.findIndex((item) => {
       return same(item, job);
    });
    if (pos) {
      let newJobs = this.state.jobs.slice(0, pos) + this.state.jobs.slice(pos+1);
      this.onJobIndex(newJobs);
    }
  }

  selectJob(job, e) {
    // alert("SELECT JOB");
    if (e) {
      e.preventDefault();
    }

    this.setState({
      page: CANDIDATES_PAGE,
      job: job
    });
  }

  renderSearch() {
    let model = this.state.page;
    let url = Pyr.URL(SEARCH_URL).push(this.state.page);

    return (
      <div>
      <Pyr.Form.Form
        model="search"
        url={url}
        id="search-form"
        ref={(node) => {this.form = node;}}
      >
        <Pyr.Form.Group name="search">
          <Pyr.Icon name="search" /><Pyr.Form.TextField placeholder="Search..."/>
        </Pyr.Form.Group>
      </Pyr.Form.Form>
      </div>
    );
  }

  renderNav() {
    return (
       <Pyr.Grid.Row className="navbar flx-row align-items-center">
          <Pyr.Grid.Col className="col col-1 col-sm-1 col-md-2 navbar-nav">
            <UserLabel user={this.context.user} />
          </Pyr.Grid.Col>
          <Pyr.Grid.Col className="col col-1 col-sm-1 col-md-2 navbar-nav hidden-sm-down">
            <Pyr.SmallLabel className="nav-item">{this.state.page}</Pyr.SmallLabel>
          </Pyr.Grid.Col>
          <Pyr.Grid.Col className="col col-10 col-sm-10 col-md-8 navbar-nav">
            <div className="nav-item ml-auto">{this.renderSearch()}</div>
          </Pyr.Grid.Col>
        </Pyr.Grid.Row>
    );
  }

/*
  render_old() {
    return (
      <div className="red flx-row flx-stretch s1">
        <div className="flx-1 flx-col flx-stretch cyan">
          <div className="flx-1 flx-col flx-stretch green">
            <div className="flx-1 flx-row flx-stretch pink">
              <Pyr.Grid.ColHalf className="white">
                One
              </Pyr.Grid.ColHalf>
              <Pyr.Grid.ColHalf className="blue">
                Two
              </Pyr.Grid.ColHalf>
            </div>
          </div>
        </div>
        <div className="flx-1 flx-col flx-stretch grey">
          <div className="yellow flx-1">
            Bye
          </div>
        </div>
      </div>
    );
  }
*/

  renderSideBar() {
    let self = this;

    let jobKids = this.state.jobs.map( (child, pos) => {
        return (<Sidebar.Button 
                  key={child.uuid} 
                  selected={this.state.job && same(this.state.job, child)} 
                  onClick={this.onJobClicks[child.id]}><span className="hidden-sm-down">{child.title} ({child.candidate_count || 0})</span></Sidebar.Button>
        );
      }
    );


    return (
        <Sidebar.Main {...this.props} className="col col-1 col-sm-1 col-md-2 flx-col h-100 z-depth-1">
          <Sidebar.Header 
            id="messages"
            icon="envelope-open-o"
            onClick={this.onSetPageMessages}
            selected={this.state.page==MESSAGES_PAGE}
            itemCount={this.state.buttonItemCount[MESSAGES_PAGE] || 0}
            >Messages</Sidebar.Header>

          <Sidebar.Header 
            id="jobs" 
            icon="bullseye"
            onClick={this.onSetPageCandidates}
            selected={this.state.page==CANDIDATES_PAGE}
            itemCount={this.state.buttonItemCount[CANDIDATES_PAGE] || 0}
          >Candidates</Sidebar.Header>

          <Sidebar.Header
            className="hidden-md-up"
            id="per-jobs"
            icon="hashtag"
            onClick={this.onSetPageCandidates}
            selected={this.state.job != null}
          />
          <Pyr.Scroll className="hidden-sm-down flx-1">
            <Sidebar.Menu>
              {jobKids}
            </Sidebar.Menu>
          </Pyr.Scroll>

          <Sidebar.Header 
            id="jobs"
            icon="plus"
            onClick={this.onSetPageJobs}
            itemCount={this.state.buttonItemCount[JOBS_PAGE] || 0}
            selected={this.state.page==JOBS_PAGE}
          >Jobs</Sidebar.Header>
          <Sidebar.Header 
            id="recruiters"
            icon="users"
            onClick={this.onSetPageRecruiters}
            itemCount={this.state.buttonItemCount[RECRUITERS_PAGE] || 0}
            selected={this.state.page==RECRUITERS_PAGE}
          >Recruiters</Sidebar.Header>
          <Sidebar.Header 
            id="settings"
            icon="gear"
            onClick={this.onSetPageSettings}
            selected={this.state.page==SETTINGS_PAGE}
          >Settings</Sidebar.Header>
        </Sidebar.Main>
    );
  }

  renderBlurb(title) {
    return null;

    if (this.state.job && this.state.page == CANDIDATES_PAGE) {
      return (
        <div className="main-blurb hidden-sm-down">
          <JobTitle job={this.state.job} />
        </div>
      );
    }

    return (
      <div className="main-blurb hidden-sm-down">{title}</div>
    );
  }

  pageProps(page) {
    let props = {
      action: this.state.action,
      jobs: this.state.jobs,
      job: this.state.job,

      onSetAction: this.onSetAction,
      onSetUnaction: this.onSetUnaction,
      onSetButtonCount: this.onSetButtonCount,

      onJobCreate: this.onJobCreate,
      onJobUpdate: this.onJobUpdate,
      onJobDelete: this.onJobDelete,

      showing: (this.state.page == page), 
      url: PageURL(page),
      jobs: this.state.jobs,
    };

    return props;
  }

  renderMain() {
    let mainTitle = this.title();

    return (
        <main 
          className="col col-11 offset-1 col-sm-11 offset-sm-1 col-md-10 offset-md-2 flx-col flx-1 main-page" 
          id="main-page"
        >
          <div className="d-flex flx-1">
            {this.renderBlurb(mainTitle)}
            <div className="flx-row flx-1">
              <MessagesPage 
                {...this.pageProps(MESSAGES_PAGE)}
              />
              <JobsPage 
                {...this.pageProps(JOBS_PAGE)}
                 items={this.state.jobs}
              />
              <CandidatesPage 
                {...this.pageProps(CANDIDATES_PAGE)}
              />
              <JobsPage 
                {...this.pageProps(JOBS_PAGE)}
              />
              <RecruitersPage 
                {...this.pageProps(RECRUITERS_PAGE)}
              />
              <SettingsPage 
                {...this.pageProps(SETTINGS_PAGE)}
              />
            </div>
          </div>
        </main>
    );
  }

  render() {
    //alert(this.state.page == CANDIDATES_PAGE);
    // React went bonkers changing the top level dude

    if (this.state.loading) {
      return (
        <Pyr.Grid.FullContainer key="react-top">
          <Pyr.Loading />
        </Pyr.Grid.FullContainer>
      );
    }

    return(
      <Pyr.Grid.FullContainer key="react-top">
        { this.renderNav() }
        <div className="flx-row flx-1">
          { this.renderSideBar() }
          { this.renderMain() }
        </div>
      </Pyr.Grid.FullContainer>
    );
  }
}

const Footer = (props) => (
  <div>Footer {props.name}!</div>
);

///
/// 
///

render (
  <Pyr.UserProvider>
    <Dashboard />
  </Pyr.UserProvider>,
   document.getElementById('react-container')
);
