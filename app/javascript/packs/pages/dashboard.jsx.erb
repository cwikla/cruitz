import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { 
  render 
} from 'react-dom';

import {
  createStore,
  applyMiddleware
} from 'redux';

import {
  Provider
} from 'react-redux';

import Pyr from '../pyr/pyr';

import Container, { Row, Column, ColumnHalf } from './container';
import Sidebar from './side_bar';
import JobsPage, { JobSideButton } from './jobs/jobs_page';
import CandidatesPage, {CandidateSideButton} from './jobs/candidates_page';
import RecruitersPage from './recruiters_page';
import SettingsPage from './settings_page';
import MessagesPage from './messages_page';

const JOBS_PAGE = 'Jobs';
const CANDIDATES_PAGE = 'Candidates';
const RECRUITERS_PAGE = 'Recruiters';
const SETTINGS_PAGE = 'Settings';
const MESSAGES_PAGE = 'Messages';

const JOBS_URL = "/jobs";

function ajaxError(jaXHR, textStatus, errorThrown) {
   alert(errorThrown);
}

function same(a,b) {
  return a.uuid == b.uuid;
}

class DashboardContainer extends Container {
  constructor(props) {
    super(props);

    this.state = {
      openPage: JOBS_PAGE,
      jobs: [],
      job: null,
    };

    this.onJobIndex = this.jobIndex.bind(this);
    this.onJobCreate = this.jobCreate.bind(this);
    this.onJobUpdate = this.jobUpdate.bind(this);
    this.onJobDelete = this.jobDelete.bind(this);

    this.setPageMessages = this.setPage.bind(this, MESSAGES_PAGE);
    this.setPageJobs = this.setPage.bind(this, JOBS_PAGE);
    this.setPageCandidates = this.setPage.bind(this, CANDIDATES_PAGE);
    this.setPageRecruiters = this.setPage.bind(this, RECRUITERS_PAGE);
    this.setPageSettings = this.setPage.bind(this, SETTINGS_PAGE);
  }

  title() {
    return (this.state.openPage == CANDIDATES_PAGE) ? (this.state.job ? this.state.job.title : "Jobs") : this.state.openPage;
  }

  setPage(page, e) {
    e.preventDefault();

    this.setState({openPage: page});
    //alert(page);
  }

  getJobs() {
    $.getJSON({
      type: Pyr.Method.GET,
      url: JOBS_URL,
      context: this
    }).done(function(data, textStatus, jaXHR) {
        this.onJobIndex(data.jobs);
    }).fail(function(jaXHR, textStatus, errorThrown) {
      ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  componentDidMount() {
    this.getJobs();
  }

  same(j1, j2) {
    return j1.uuid == j2.uuid;
  }

  jobIndex(jobs) {
    this.setState({jobs});
  }

  jobCreate(job) {
    let newJobs = this.state.jobs.slice().push(job);
    this.onJobIndex(newJobs);
  }

  jobUpdate(job) {
    let newJobs = this.state.jobs.map((item) => {
      if (same(item, job)) {
        return job;
      }
      return item;
    });
    this.onJobIndex(newJobs);
  }

  jobDelete(job) {
    let pos = this.state.jobs.findIndex((item) => {
       return same(item, job);
    });
    if (pos) {
      let newJobs = this.state.jobs.slice(0, pos) + this.state.jobs.slice(pos+1);
      this.onJobIndex(newJobs);
    }
  }

  selectJob(e, job) {
    e.preventDefault();

    this.setState({
      openPage: CANDIDATES_PAGE,
      job: job
    });
  }

  render_old() {
    return (
      <div className="red flx-row flx-stretch s1">
        <div className="flx-1 flx-col flx-stretch cyan">
          <div className="flx-1 flx-col flx-stretch green">
            <div className="flx-1 flx-row flx-stretch pink">
              <ColumnHalf className="white">
                One
              </ColumnHalf>
              <ColumnHalf className="blue">
                Two
              </ColumnHalf>
            </div>
          </div>
        </div>
        <div className="flx-1 flx-col flx-stretch grey">
          <div className="yellow flx-1">
            Bye
          </div>
        </div>
      </div>
    );
  }

  render() {
    let self = this;

    let jobKids = this.state.jobs.map( (child) => {
        return (<Sidebar.Button 
                  key={child.uuid} 
                  selected={this.state.job && same(this.state.job, child)} 
                  onClick={(e) => self.selectJob(e, child) }>{child.title}</Sidebar.Button>
        );
      }
    );

    let sidebarTitle = this.title();

    return(
      <div className="flx-row-stretch flx-1">
        <Sidebar.Main {...this.props} className="col col-md-2 flx-col-stretch flx-1 p-2">
          <Sidebar.Header 
            id="sidebar-messages"
            icon="envelope-o"
            onClick={this.setPageMessages}
            >All Messages</Sidebar.Header>
          <Sidebar.Header 
            id="sidebar-jobs" 
            icon="plus"
            onClick={this.setPageJobs}
          >Jobs</Sidebar.Header>
          <div className="flx-col-stretch flx-1">
            <Sidebar.Menu>
              {jobKids}
            </Sidebar.Menu>
          </div>
          <Sidebar.Section selected={this.state.job} id="sidebar-recruiters" className="">
          <Sidebar.Header 
            id="sidebar-recruiters"
            icon="users"
            onClick={this.setPageRecruiters}
          >Recruiters</Sidebar.Header>
          <Sidebar.Header 
            id="sidebar-settings"
            icon="gear"
            onClick={this.setPageSettings}
          >Settings</Sidebar.Header>
          </Sidebar.Section>
        </Sidebar.Main>
        <main className="col col-md-10 offset-md-2 m-0 p-0 flx-col-stretch flx-1 sidebar-main-page" id="sidebar-main-page">
          <Sidebar.Header>{sidebarTitle}</Sidebar.Header>
          <div className="flx-col-stretch flx-1">
            <MessagesPage {...this.props.messagePageProps} selected={this.state.openPage==MESSAGES_PAGE} />
            <JobsPage 
               {...this.props.jobsPageProps} 
              selected={this.state.openPage==JOBS_PAGE} 
              jobs={this.state.jobs}
              onJobCreate={this.onJobCreate}
              onJobUpdate={this.onJobUpdate}
              onJobDelete={this.onJobDelete}
            />
            <CandidatesPage {...this.props.candidatePageProps} job={this.state.job} selected={this.state.openPage==CANDIDATES_PAGE} />
            <RecruitersPage {...this.props.recruiterPageProps} selected={this.state.openPage==RECRUITERS_PAGE} />
            <SettingsPage {...this.props.settingsPageProps} selected={this.state.openPage==SETTINGS_PAGE} />
          </div>
        </main>
      </div>
    );
  }
}

const Footer = (props) => (
  <div>Footer {props.name}!</div>
);

///
/// 
///

let store = createStore((state) => { return state; })

render(
  <Provider store={store}>
    <DashboardContainer />
  </Provider>,
  document.getElementById('react-container')
);
