<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>

import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Pyr from '../../pyr/pyr';
const ClassNames = Pyr.ClassNames;
const Grid = Pyr.Grid;

import Page from './../page';
import Sheet from './../sheet';
import {
  UserAvatar,
  UserScore
} from '../../util/user';

class RecruiterItem extends Component {
  render() {
    let recruiter = this.props.recruiter;

    return (
      <div id={"recruiter-item-" + recruiter.id} className="recruiter-item row-stretch flx-row">
        <div className="score col-md-1 col-sm-2 blue">
          <UserScore score={recruiter.id} />
        </div>
        <div className="icon hidden-md-down col-md-1 red">
          <UserAvatar userId={recruiter.id} />
        </div>
      </div>
    );
  }

  render() {
    let recruiter = this.props.recruiter;

    let id = "recruiter-" + recruiter.id;
    let allClass = ClassNames("item recruiter-item flx-row");

    if (this.props.selected) {
       allClass.push("selected");
    }

    let fullName = recruiter.first_name + " " + recruiter.last_name;
    let phoneNumber = recruiter.phone_number || "No Phone";
    let email = recruiter.email || "No Email";
    let description = recruiter.description || "No Description";

    return (
      <div className={allClass} id={id}>
        <Pyr.Grid.Column className="recruiter col-2 d-flex">
          <UserAvatar
            className={"flx-1"}
            userId={recruiter.id}
            name={recruiter.first_name}
            small
          />
        </Pyr.Grid.Column>
        <Pyr.Grid.Column className="content">
          <div className="info col-md-5 col-sm-5">
            <div>{recruiter.first_name}</div>
            <div>FakeCompany Placeholder</div>
            <div>Description goes here</div>
          </div>
          <div className="stats col-5">
            <div>22 successful placements</div>
            <div>Last Active: 3/3/2017</div>
            <div>27 Reviews</div>
          </div>
        </Pyr.Grid.Column>
      </div>
    );
  }

}


class IndexSheet extends Sheet.Index {
  key(a) {
    return RecruitersPage.key(a)
  }

  renderItem(item, isSelected) {
    return ( <RecruiterItem recruiter={item} isSelected={isSelected} /> );
  }

  renderNone() {
    return (
      <h2> Recruiters Empty</h2>
    );
  }

}

class ShowSheet extends Sheet.Show {
  key(a) {
    return RecruitersPage.key(a)
  }

  renderItem() {
    alert("hello");
    return ( <RecruiterItem recruiter={this.props.recruiter}/> );
  }
}

class RecruitersPage extends Page {
  getItems(onLoading) {
    Pyr.getJSON({
      url: this.props.url,
      context: this,
      loading: onLoading,
    }).done(function(data, textStatus, jaXHR) {
        this.onSetItems(data.recruiters);

    }).fail(function(jaXHR, textStatus, errorThrown) {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  indexSheet() {
    return (
      <IndexSheet
        {...this.props}
        items={this.state.items}
        recruiter={this.state.selected}
        onSetAction={this.props.onSetAction}
        onSetUnaction={this.props.onSetUnaction}
        onSelect={this.onSelect}
        onUnselect={this.onUnselect}
        onGetItems={this.onGetItems}
      />
    );
  }
  
  actionSheet(action) {
    let sheet = Sheet.sheetComponent(action || "Show");
    let ActionSheet = eval(sheet);

    return (
      <ActionSheet 
        {...this.props}
        items={this.state.items}
        recruiter={this.state.selected}
        onAction={this.onAction}
        onUnaction={this.onUnaction}
      />
    );
    
  }
}
function key(item) {
  return "rec-" + item.id;
}
RecruitersPage.key = key;

export default RecruitersPage;
