<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>

import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Pyr from '../../pyr/pyr';
const Grid = Pyr.Grid;

import Page from './../page';
import Sheet from './../sheet';
import {
  UserAvatar,
  UserScore
} from '../../util/user';

class RecruiterItem extends Component {
  render() {
    let recruiter = this.props.recruiter;

    return (
      <Grid.Row id={"recruiter-item-" + recruiter.id} className="recruiter-item row-stretch">
        <Grid.Column className="score col-1 blue">
          <UserScore score={recruiter.id} />
        </Grid.Column>
        <Grid.Column className="icon hidden-sm-down col-md-1 red">
          <UserAvatar userId={recruiter.id} />
        </Grid.Column>
        <Grid.Column className="info col-md-5 col-sm-6">
          <Grid.Row>{recruiter.first_name}</Grid.Row>
          <Grid.Row>FakeCompany Placeholder</Grid.Row>
          <Grid.Row>Description goes here</Grid.Row>
        </Grid.Column>
        <Grid.Column className="stats col-md-5">
          <Grid.Row>22 successful placements</Grid.Row>
          <Grid.Row>Last Active: 3/3/2017</Grid.Row>
          <Grid.Row>27 Reviews</Grid.Row>
        </Grid.Column>
      </Grid.Row>
    );
  }
}


class IndexSheet extends Sheet.Index {
  key(a) {
    return RecruitersPage.key(a)
  }

  renderItem(item, isSelected) {
    return ( <RecruiterItem recruiter={item} isSelected={isSelected} /> );
  }

  renderNone() {
    return (
      <h2> Recruiters Empty</h2>
    );
  }

}

class ShowSheet extends Sheet.Show {
  key(a) {
    return RecruitersPage.key(a)
  }

  renderItem() {
    return ( <RecruiterItem /> );
  }
}

class RecruitersPage extends Page {
  getItems(onLoading) {
    Pyr.getJSON({
      url: this.props.url,
      context: this,
      loading: onLoading,
    }).done(function(data, textStatus, jaXHR) {
        this.onSetItems(data.recruiters);

    }).fail(function(jaXHR, textStatus, errorThrown) {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  indexSheet() {
    return (
      <IndexSheet
        {...this.props}
        items={this.state.items}
        selected={this.state.selected}
        onSetAction={this.props.onSetAction}
        onSetUnaction={this.props.onSetUnaction}
        onSelect={this.onSelect}
        onUnselect={this.onUnselect}
        getItems={this.getItems}
      />
    );
  }
  
  actionSheet(action) {
    let sheet = Sheet.sheetComponent(action || "Show");
    let ActionSheet = eval(sheet);

    return (
      <ActionSheet 
        {...this.props}
        items={this.state.items}
        selected={this.state.selected}
        onAction={this.onAction}
        onUnaction={this.onUnaction}
      />
    );
    
  }
}
function key(item) {
  return item.uuid;
}
RecruitersPage.key = key;

export default RecruitersPage;
