
import React, {
  Component
} from 'react';

import PropTypes from 'prop-types';

import Pyr from '../pyr/pyr';

const SHOW_ACTION = "Show";

class Page extends Pyr.UserComponent {
  getInitState(props) {
    return {};
  }

  constructor(props) {
    super(props);

    let myState = {
      items: null,
      selected: null,
      fullDetail: false,
    };

    this.state = Object.assign(myState, this.getInitState(props));

    this.onSelect = this.setSelected.bind(this);
    this.onUnselect = this.setSelected.bind(this, null);

    //this.onSetAction = this.setAction.bind(this);
    //this.onSetUnaction = this.setAction.bind(this, null);

    this.onSetItems = this.setItems.bind(this);
    this.getItems = this.getItems.bind(this);
  }

  name() {
    let fullName = this.constructor.name;
    let pos = fullName.search("Page");
    if (pos == -1) {
      alert("page.jsx: You need to define a name cuz you didn't name your subclass *Page");
    }
    let name = fullName.substring(0, pos);
    return name;
  }

  getItems() {
    alert("Page:getItems needs to be implemented");
  }

////// COPY ME INTO SUBCLASS //////

  indexSheet() {
    alert("page.jsx: IF YOU ARE SEEING THIS, COPY THESE INTO SUBCLASS");

    return (
      <IndexSheet 
        {...this.props} 
        items={this.props.items}
        onSetAction={this.props.onSetAction}
        onSetUnaction={this.props.onSetUnaction}
        onSelect={this.onSelect}
        onUnselect={this.onUnselect}
        loading={this.state.loading}
        job={this.props.job}
        jobs={this.props.jobs}
      />
    );
  }

  actionSheet(action) {
    alert("page.jsx: IF YOU ARE SEEING THIS, COPY THESE INTO SUBCLASS");

    let sheet = Sheet.sheetComponent(action || SHOW_ACTION);
    let ActionSheet = eval(sheet);

    return (
      <ActionSheet 
        {...this.props}
        items={this.state.items}
        onSetAction={this.props.onSetAction}
        onSetUnaction={this.props.onSetUnaction}
        onSelect={this.onSelect} 
        onSetItems={this.onSetItems}
        loading={this.state.loading}
        job={this.props.job}
        jobs={this.props.jobs}
      />
    );
   
  }

  showActionSheet() {
    return !!this.props.action;
  }

///// END ////

  setItems(items) {
    this.setState({ 
      items
    });
  }

  setSelected(selected) {
    //alert("SELECTED " + JSON.stringify(selected));
    this.setState({
      selected
    });
    this.props.onSetAction(SHOW_ACTION);
  }

  setActionOld(action) {
    //alert("Set Acxtion" + action);
    this.setState({action});
  }

  renderIndexSheet() {
    let extraClass = "col-md-6";

    if (this.showActionSheet()) {
      if (this.state.fullDetail) {
        extraClass = "hidden";
      }
      else {
        extraClass = extraClass + " hidden-xs-down";
      }
    }
    else {
      extraClass = "col-md-12";
    }

    extraClass = extraClass + " index flx-col-stretch flx-1";

    return (
      <Pyr.Grid.ColHalf className={extraClass}>
        {this.indexSheet()}
      </Pyr.Grid.ColHalf>
    );
  }

  renderNoSheet() {
    return null;
  }

  renderActionSheet() {
    if (!this.showActionSheet()) {
      return this.renderNoSheet();
    }

    let extraClass = "col-md-6";

    if (this.state.fullDetail) {
      extraClass = "col-md-12";
    }

    extraClass = extraClass + " action " + this.props.action;
    extraClass = extraClass.toLowerCase();

    return (
      <Pyr.Grid.ColHalf className={extraClass}>
        {this.actionSheet(this.props.action)}
      </Pyr.Grid.ColHalf>
    );
  }

  renderHeader() {
    return null;
  }


  render() {
    if (this.props.showing == undefined) {
      alert("If you don't send in showing you won't see shit!");
    }
    if (!this.props.showing) {
      return null;
    }

    let id = this.name().toLowerCase() + "-page";

    return (
        <Pyr.Grid.Row className="flx-row-stretch flx-1 no-gutters" id={id}>
          {this.renderHeader()}
          {this.renderIndexSheet()}
          {this.renderActionSheet()}
        </Pyr.Grid.Row>
    );
  }
}

export default Page;
