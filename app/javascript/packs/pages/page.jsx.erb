
import React, {
  Component
} from 'react';

import Pyr from '../pyr/pyr';

import { 
  Row,
  ColumnHalf,
} from './container';

class Page extends Component {
  getInitState(props) {
    return {
      action: null,
      items: [],
      selected: null,
      fullDetail: false
    };
  }

  constructor(props) {
    super(props);

    this.state = this.getInitState(props);

    this.onSelect = this.setSelected.bind(this);
    this.onUnselect = this.setSelected.bind(this, null);

    this.onAction = this.setAction.bind(this);
    this.onUnaction = this.setAction.bind(this, null);

    this.onItems = this.setItems.bind(this);
  }

  name() {
    let fullName = this.constructor.name;
    let pos = fullName.search("Page");
    if (pos == -1) {
      alert("page.jsx: You need to define a name cuz you didn't name your subclass *Page");
    }
    let name = fullName.substring(0, pos);
    return name;
  }

  getItems() {
    alert("Page:getItems needs to be implemented");
  }

  componentDidMount() {
    this.getItems();
  }

////// COPY ME INTO SUBCLASS //////

  indexSheet() {
    alert("page.jsx: IF YOU ARE SEEING THIS, COPY THESE INTO SUBCLASS");

    return (
      <IndexSheet 
        {...this.props} 
        items={this.state.items}
        onSelect={this.onSelect} 
        onItems={this.onItems}
      />
    );
  }

  actionSheet(action) {
    alert("page.jsx: IF YOU ARE SEEING THIS, COPY THESE INTO SUBCLASS");

    let sheet = Sheet.sheetComponent(action || "Show");
    let ActionSheet = eval(sheet);

    return (
      <ActionSheet 
        {...this.props}
        items={this.state.items}
        selected={this.state.selected}
        onAction={this.onAction}
        onUnsetAction={this.onUnsetAction}
        onSelect={this.onSelect} 
        onItems={this.onItems}
      />
    );
   
  }

///// END ////

  setItems(items) {
    this.setState({ 
      items
    });
  }

  setSelected(selected) {
    //alert("SELECTED " + JSON.stringify(selected));
    this.setState({
      selected
    });
  }

  setAction(action) {
    //alert("Set Acxtion" + action);
    this.setState({action});
  }

  renderIndexSheet() {
    let extraClass = "col-md-6";

    if (this.state.fullDetail) {
      extraClass = "hidden-xs-up";
    }
    else if (this.state.selected) {
      extraClass = extraClass + " hidden-xs-down";
    }
    else if (!this.state.selected) {
      extraClass = "col-md-12";
    }

    extraClass = extraClass + " sheet index";

    return (
      <ColumnHalf className={extraClass}>
        {this.indexSheet()}
      </ColumnHalf>
    );
  }

  renderNoSheet() {
    return null;
  }

  renderActionSheet() {
    if (!this.state.selected) {
      return this.renderNoSheet();
    }

    let extraClass = "col-md-6";

    if (this.state.fullDetail) {
      extraClass = "col-md-12";
    }
    else if (!this.state.selected) {
      extraClass = "hidden-xs-up";
    }

    extraClass = extraClass + " sheet action " + this.state.action;

    return (
      <ColumnHalf className={extraClass}>
        {this.actionSheet(this.state.action)}
      </ColumnHalf>
    );
  }


  render() {
    if (this.props.showing == undefined) {
      alert("If you don't send in showing you won't see shit!");
    }
    if (!this.props.showing) {
      return null;
    }

    let myClasses = "page col-md-12 transition" + (this.props.showing ? " on" : " off");
    //let child = React.cloneElement(React.Children.only(this.props.children), this.props);
    let allClasses = Pyr.Util.mergeClassName(this.props.className, myClasses);

    let id = this.name().toLowerCase() + "-page";

    return (
      <div className={allClasses} id={id}>
        <Row className="">
          {this.renderIndexSheet()}
          {this.renderActionSheet()}
        </Row>
      </div>
    );
  }
}

export default Page;
