<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>


import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Page from '../page';

import Pyr from '../../pyr/pyr';
const ClassNames = Pyr.ClassNames;

import Sheet from '../sheet';

const JOBS_URL = "/jobs";
const CANDIDATES_URL = "/candidates";

class CandidateHeader extends Component {
  render() {
    if (!this.props.candidate) {
      return <Pyr.Loading />
    }

    let id ="job-header-" + this.props.candidate.id;
    let title = this.props.candidate.title;
    let responseCount = 11;
    let createdAt = "Today";

    return (
      <div className="job-header card">
        <div className="card-block">
          <Pyr.Grid.Row className="card-title">
            <Pyr.Grid.ColFull className="name col col-md-12"><span className="card-text">{title}</span></Pyr.Grid.ColFull>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row>
            <Pyr.Grid.ColHalf id="response-count">{responseCount}</Pyr.Grid.ColHalf>
            <Pyr.Grid.ColHalf id="created-at">{createdAt}</Pyr.Grid.ColHalf>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row id="candidate-bar">
            <Pyr.Grid.ColThird id="sort" className="sort">[Sort]</Pyr.Grid.ColThird>
            <Pyr.Grid.ColThird id="search" className="search">Search( )</Pyr.Grid.ColThird>
            <Pyr.Grid.ColThird id="edit">Edit Link</Pyr.Grid.ColThird>
          </Pyr.Grid.Row>
        </div>
      </div>
    );
  }
}

class CandidateItem extends Component {

  render() {
    let id = "candidate-" + this.props.candidate.id;
    let classes = ClassNames("candidate-item card");

    if (this.props.selected) {
       classes.push("selected");
    }

    let fullName = this.props.candidate.first_name + " " + this.props.candidate.last_name;
    let phoneNumber = this.props.candidate.phone_number || "No Phone";
    let email = this.props.candidate.email || "No Email";
    let description = this.props.candidate.description || "No Description";

    return (
      <div className={classes} id={id}>
        <div className="card-block">
          <Pyr.Grid.Row className="card-title">
            <Pyr.Grid.ColFull className="name col col-md-12"><Pyr.SmallLabel>Name:</Pyr.SmallLabel><span className="card-text">{fullName}</span></Pyr.Grid.ColFull>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row>
            <Pyr.Grid.ColHalf className="phone-number"><Pyr.SmallLabel>PhoneNumber:</Pyr.SmallLabel><span className="card-text">{phoneNumber}</span></Pyr.Grid.ColHalf>
            <Pyr.Grid.ColHalf className="email"><Pyr.SmallLabel>Email:</Pyr.SmallLabel>{email}</Pyr.Grid.ColHalf>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row>
            <Pyr.Grid.ColHalf className="employer"><Pyr.SmallLabel>Employer:</Pyr.SmallLabel> Hmmmmmm</Pyr.Grid.ColHalf>
            <Pyr.Grid.ColHalf className="cost"><Pyr.SmallLabel>Est. Cost:</Pyr.SmallLabel> $27,000</Pyr.Grid.ColHalf>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row>
            <Pyr.Grid.ColFull className="description">{description}</Pyr.Grid.ColFull>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row className="recruiter-info">
            <Pyr.Grid.ColFull>Interesting stuff about the recruiter goes here!</Pyr.Grid.ColFull>
          </Pyr.Grid.Row>
        </div>
      </div>
    );
  }
}

class CandidateForm extends Component {

  methodToName(method) {
    switch (method) {
      case Pyr.Method.PUT:
        return "Update";
        break

      default:
        return "Create";
        break;
    }
  }

  render() {
    let key = "candidate-form";
    let url = JOBS_URL;

    if (this.props.candidate){
      url = url + "/" + this.props.candidate.id;
      key = CandidatesPage.key(this.props.candidate);
    }

    let method = this.props.method || Pyr.Method.POST;

    //alert("Render FOrm Candidate " + this.props.candidate.id);


    return (
      <div className="form-parent">
        <Pyr.Form.Form
          model="Candidate"
          object={this.props.candidate}
          url={url}
          method={method}
          id="candidate-form" 
          key={key}
          ref={(node) => { this.form = node; }} 
          onPreSubmit={this.props.onPreSubmit} 
          onPostSubmit={this.props.onPostSubmit}
          onSuccess={this.props.onSuccess}
          onError={this.props.onError}
        >
      
          <Pyr.Form.Group name="title">
            <Pyr.Form.Label>Title</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder= "Enter candidate title"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="time_commit">
            <Pyr.Form.Label>Time Requirements</Pyr.Form.Label>
            <Pyr.Form.Select>
              <Pyr.Form.Option value="0">Full Time</Pyr.Form.Option>
              <Pyr.Form.Option value="1">Part Time</Pyr.Form.Option>
              <Pyr.Form.Option value="2">Contractor</Pyr.Form.Option>
            </Pyr.Form.Select>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="description">
            <Pyr.Form.Label>Description</Pyr.Form.Label>
            <Pyr.Form.TextArea placeholder="Enter description" rows="10" />
          </Pyr.Form.Group>
      
        </Pyr.Form.Form>
        <div className="form-footer">
          <Pyr.Form.SubmitButton target={this} disabled={this.props.isLoading}>{this.methodToName(method)}</Pyr.Form.SubmitButton>
        </div>
      </div>
    );
  }
}

class EditSheet extends Sheet.Edit {
  formPluck(data) {
    return data.candidate;
  }

  renderForm() {
    //alert("JOB EDIT " + this.props.candidate.id);
    return (
      <CandidateForm 
        onPreSubmit={this.onPreSubmit} 
        onPostSubmit={this.onPostSubmit} 
        candidate={this.props.candidate} 
        onSuccess={this.onSuccess}
        method={Pyr.Method.PUT} 
        isLoading={this.state.isLoading}/>
    );
  }
}

class IndexSheet extends Sheet.Index {
  key(item) {
    return CandidatesPage.key(item);
  }

  renderItem(item, isSelected) {
    return (<CandidateItem candidate={item} selected={isSelected} />);
  }
}

class ShowSheet extends Sheet.Show {
  key(item) {
    return CandidatesPage.key(item);
  }

  renderItem(item, isSelected) {
    return (<CandidateItem candidate={item} selected={isSelected} />);
  }
}

class New extends Sheet.Base {
  renderForm() { 
    return ( 
      <CandidateForm onPreSubmit={this.onPreSubmit} postSubmit={this.postSubmit} />
    );
  }
}

class CandidatesPage extends Page {
  getInitState(props) {
    return {
      job: props.job, // placeholder until we can fetch the full one
      fullDetail: false
    };
  }

  indexSheet() {

    return (
      <IndexSheet
        {...this.props}
        items={this.state.items}
        jobMap={this.jobMap}
        selected={this.state.selected}
        onSetAction={this.props.onSetAction}
        onSetUnaction={this.props.onSetUnaction}
        onSelect={this.onSelect}
        onUnselect={this.onUnselect}
        getItems={this.getItems}
      />
    );
  }

  actionSheet(action) {
    let sheet = Sheet.sheetComponent(action || "Show");
    let ActionSheet = eval(sheet);

    return (
      <ActionSheet
        {...this.props}
        items={this.props.items}
        selected={this.state.selected}
        onAction={this.onAction}
        onUnaction={this.onUnaction}
        onSelect={this.onSelect}
        onUnselect={this.onUnselect}
      />
    );

  }

  getItems() {
    this.getCandidates();
  }

  getCandidates(job) {
    let params = [{"cand": 1}];

    let url = job ? (JOBS_URL + "/" + job.id + "?cand=1") : CANDIDATES_URL;

    Pyr.getJSON({
      url: url,
      context: this,
      loading: this.onLoading,

    }).done((data, textStatus, jaXHR) => {
      this.onJobLoad(data.job, data.candidates);

    }).fail((jaXHR, textStatus, errorThrown) => {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);

    });
  }

  onJobLoad(job, candidates) {
    this.setItems(candidates);
    this.setState({
      job
    });
  }

  componentDidUpdate(prevProps, prevState) {
     //alert("Did Update");
    //alert(this.props.job);
    if(this.props.job){
     //alert(this.props.job.uuid);
    }
    let prevId = prevProps.job ? prevProps.job.id : -1;
    let nextId = this.props.job ? this.props.job.id : -1;

    if (prevId != nextId) {
      this.getCandidates(this.props.job);
    }
  }
}

function key(item) {
  return "candidate-" + item.id;
}

CandidatesPage.key = key;


export default CandidatesPage;
