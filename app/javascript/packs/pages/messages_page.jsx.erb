<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>

import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Pyr from '../pyr/pyr';
const Grid = Pyr.Grid;

import Page from './page';
import Sheet from './sheet';

const MESSAGES_URL = "/messages";

class MessageItem_old extends Component {

  render() {
    let message = this.props.message;

    return (
       <div className="message-item">
        <h4>ID:{message.id}:ROOT:{message.root_message_id}:PARENT:{message.parent_message_id}:JOB:{message.job_id}</h4>
        <h4>{message.title}</h4>
        <div>{message.body}</div>
      </div>
    );
  }
}

class MessageItem extends Component {
  render() {
    let message = this.props.message;
    let icon = message.candidate ? message.candidate.first_name : "Q&A";

    return (
      <div className="message-item">
          <Grid.Row> 
            <Grid.Column className="col-1 red">
              {icon}
            </Grid.Column>
            <Grid.Column className="col-9 blue">
              {message.job.title}
            </Grid.Column>
            <Grid.Column className="col-2 red">
              {message.created_at}
            </Grid.Column>
          </Grid.Row>
          <Grid.Row> 
            <Grid.Column className="col-1 red">
              Icon/Avatar
            </Grid.Column>
            <Grid.Column className="col-11 blue">
              {message.title}
            </Grid.Column>
          </Grid.Row>
      </div>
    );
  }
}

class IndexSheet extends Sheet.Index {
  key(a) {
    return MessagesPage.key(a)
  }

  renderHeader() {
    return (
      <Pyr.Grid.Row>
        <Pyr.Grid.ColFull className="blue"><h2 className="red">This is my header</h2></Pyr.Grid.ColFull>
      </Pyr.Grid.Row>
    );
  }

  renderItem(message, isSelected) {
    return ( <MessageItem message={message} isSelected={isSelected}/> );
  }

  componentDidMount() {
    if (!this.props.items) {
      this.props.getItems(this.onLoading);
    }
  }

}

class ShowSheet extends Sheet.Show {
  getInitState(props) {
    return Object.assign(super.getInitState(props), { thread: null });
  }

  constructor(props) {
    super(props);

    this.onMessageDetails = this.messageDetails.bind(this);
    this.onBack = this.back.bind(this);
  }

  back(e) {
    if (e) {
      e.preventDefault();
    }

    this.props.onUnaction();
  }

  renderHeader() {
    let jobID = this.props.selected.job_id;
    let job = this.props.jobs.find( (x) => x.id == jobID ) // FIXME

    if (!job) {
      return null;
    }

    let id ="job-header-" + job.id;
    let title = job.title;
    let responseCount = 11;
    let createdAt = "Today";

    return (
      <div className="job-header">
        <div className>
          <Pyr.Grid.Row>
            <Pyr.Grid.ColFull className="name col col-md-12"><span className="">{job.id}:{title}</span></Pyr.Grid.ColFull>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row>
            <Pyr.Grid.ColHalf id="response-count">{responseCount}</Pyr.Grid.ColHalf>
            <Pyr.Grid.ColHalf id="created-at">{createdAt}</Pyr.Grid.ColHalf>
          </Pyr.Grid.Row>
          <Pyr.Grid.Row id="message-bar">
            <Pyr.Grid.ColThird id="sort" className="sort"><a href="#" onClick={this.onBack}>Back</a></Pyr.Grid.ColThird>
            <Pyr.Grid.ColThird id="sort" className="sort">[Sort]</Pyr.Grid.ColThird>
            <Pyr.Grid.ColThird id="search" className="search">Search( )</Pyr.Grid.ColThird>
            <Pyr.Grid.ColThird id="edit">Edit Link</Pyr.Grid.ColThird>
          </Pyr.Grid.Row>
        </div>
      </div>
    );
  }

  key(a) {
    return MessagesPage.key(a)
  }

  messageDetails(message, thread) {
    //alert(JSON.stringify(thread));
    // FIXME ignore message, we already have it in props.selected - FOR NOW ;)
    this.setState({
      thread
    });
  }

  getMessage(mid) {
    let url =  MESSAGES_URL + "/" + mid;
    //alert(url);
    Pyr.getJSON({
      url: url,
      context: this,
      loading: this.onLoading
    }).done(function(data, textStatus, jaXHR) {
     this.onMessageDetails(data.message, data.thread);
   
    }).fail(function(jaXHR, textStatus, errorThrown) {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  componentDidMount() {
    if (this.props.selected) {
      this.getMessage(this.props.selected.id);
    }
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.selected && (this.props.selected.id != prevProps.selected.id)) {
      this.getMessage(this.props.selected.id);
    }
  }


  renderItem(message, isSelected) {
    if (!this.state.thread || this.state.thread.length <= 1) {
      return ( <MessageItem message={message} isSelected={isSelected}/> );
    }

    let thid = "thread-" + this.props.selected.root_message_id;

    return (
      <div id={thid} className="message-thread">
        { this.state.thread.map((msg, pos) => {
            return ( <MessageItem message={msg} isSelected={msg.id == this.props.selected.id} key={thid+"-"+msg.id}/> );
          })
        }
      </div>
    );
  }
}

class MessagesPage extends Page {
  getInitState(props) {
    return Object.assign(super.getInitState(props), { 
      fullDetail: true,
    });
  }

  key(a) {
    return "message" + "-" + a.id;
  }

/* FIXME
  componentDidUpdate(prevProps, prevState) {
    if (this.props.jobs != prevProps.jobs) {
      let jobs = this.props.jobs || [];
      this.setState({
      });
    }
  }
*/

  mapItems(messages) {
    let jobs = this.props.jobs;
    let jobMap = jobs.reduce((m, o) => {m[o.id] = o; return m;}, {});

    for(let m of messages) {
      console.log("MESSAGE: " + JSON.stringify(m));
    }

    let newMessages = messages.map((msg, pos) => {
      let job = jobMap[msg.job_id]; // FIXME, if job not here go fetch it
      let tmp = Object.assign({}, msg, {job});
      return tmp;
    });

    this.onItems(newMessages);
  }

  getItems(onLoading) {
    Pyr.getJSON({
      url: MESSAGES_URL,
      context: this,
      loading: onLoading,
    }).done(function(data, textStatus, jaXHR) {
        this.mapItems(data.messages);

    }).fail(function(jaXHR, textStatus, errorThrown) {
      Pyr.ajaxError(jaXHR, textStatus, errorThrown);
    });
  }

  indexSheet() {
    return (
      <IndexSheet 
        {...this.props} 
        items={this.state.items}
        selected={this.state.selected}
        onAction={this.onAction}
        onUnaction={this.onUnaction}
        onSelect={this.onSelect}
        onUnselect={this.onUnselect}
        getItems={this.getItems}
      />
    );
  }
  
  actionSheet(action) {
    let sheet = Sheet.sheetComponent(action || "Show");
    let ActionSheet = eval(sheet);

    //alert("actionSheet: " + this.state.selected.id);

    return (
      <ActionSheet 
        {...this.props}
        items={this.state.items}
        selected={this.state.selected}
        onAction={this.onAction}
        onUnaction={this.onUnaction}
      />
    );
    
  }
}

function key(item) {
  return "message-" + item.id;
}
MessagesPage.key = key;

export default MessagesPage;
