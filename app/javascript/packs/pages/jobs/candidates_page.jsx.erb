<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>


import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Page from '../page';
import { 
  Row, 
  ColumnFull, 
  ColumnHalf 
} from '../container';

import Pyr from '../../pyr/pyr';
import Sheet, { ajaxError, sheetComponent, sheetID } from '../sheet';

const JOBS_URL = "/jobs";

class CandidateItem extends Component {

  render() {
    let id = "candidate-" + this.props.candidate.id;

    return (
      <div className="candidate-item" id={id}>
        <Row>
          <ColumnFull className="name col col-md-12"><Pyr.SmallLabel>Name:</Pyr.SmallLabel> This is the name {this.props.candidate.uuid}</ColumnFull>
        </Row>
        <Row>
          <ColumnHalf className="phone-number"><Pyr.SmallLabel>PhoneNumber:</Pyr.SmallLabel> 4158675309</ColumnHalf>
          <ColumnHalf className="email"><Pyr.SmallLabel>Email:</Pyr.SmallLabel> asdf@cwikla.com</ColumnHalf>
        </Row>
        <Row>
          <ColumnHalf className="employer"><Pyr.SmallLabel>Employer:</Pyr.SmallLabel> Google</ColumnHalf>
          <ColumnHalf className="cost"><Pyr.SmallLabel>Est. Cost:</Pyr.SmallLabel> $27,000</ColumnHalf>
        </Row>
        <Row>
          <ColumnFull className="description">This is the description</ColumnFull>
        </Row>
        <Row className="recruiter-info">
          <ColumnFull>Interesting stuff about the recruiter goes here!</ColumnFull>
        </Row>
      </div>
    );
  }

  render_old() {
    let id = "candidate-" + this.props.candidate.id;

    return (
      <div id={id}>
        <h2>{this.props.candidate.first_name} {this.props.candidate.last_name}</h2>
      </div>
    );
  }
}

class CandidateForm extends Component {

  methodToName(method) {
    switch (method) {
      case Pyr.Method.PUT:
        return "Update";
        break

      default:
        return "Create";
        break;
    }
  }

  render() {
    let key = "candidate-form";
    let url = JOBS_URL;

    if (this.props.candidate){
      url = url + "/" + this.props.candidate.id;
      key = key + "-" + this.props.candidate.id;
    }

    let method = this.props.method || Pyr.Method.POST;

    //alert("Render FOrm Candidate " + this.props.candidate.id);


    return (
      <div className="form-parent">
        <Pyr.Form.Form
          controller="Candidate"
          object={this.props.candidate}
          url={url}
          method={method}
          id="candidate-form" 
          key={key}
          ref={(node) => { this.form = node; }} 
          onPreSubmit={this.props.onPreSubmit} 
          onPostSubmit={this.props.onPostSubmit}
          onSuccess={this.props.onSuccess}
          onError={this.props.onError}
        >
      
          <Pyr.Form.Group name="title">
            <Pyr.Form.Label>Title</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder= "Enter candidate title"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="time_commit">
            <Pyr.Form.Label>Time Requirements</Pyr.Form.Label>
            <Pyr.Form.Select>
              <Pyr.Form.Option value="0">Full Time</Pyr.Form.Option>
              <Pyr.Form.Option value="1">Part Time</Pyr.Form.Option>
              <Pyr.Form.Option value="2">Contractor</Pyr.Form.Option>
            </Pyr.Form.Select>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="description">
            <Pyr.Form.Label>Description</Pyr.Form.Label>
            <Pyr.Form.TextArea placeholder="Enter description" rows="10" />
          </Pyr.Form.Group>
      
        </Pyr.Form.Form>
        <div className="form-footer">
          <Pyr.Form.SubmitButton target={this} disabled={this.props.isLoading}>{this.methodToName(method)}</Pyr.Form.SubmitButton>
        </div>
      </div>
    );
  }
}

class CandidateEditSheet extends Sheet {
  constructor(props) {
    super(props);

    this.onSuccess = this.success.bind(this);
  }

  success(data, textStatus, jqXHR) {
    this.props.onCandidateUpdate(data.candidate);
  }

  render() {
    //alert("JOB EDIT " + this.props.candidate.id);
    return (
      <CandidateForm 
        onPreSubmit={this.onPreSubmit} 
        onPostSubmit={this.onPostSubmit} 
        candidate={this.props.candidate} 
        onSuccess={this.onSuccess}
        method={Pyr.Method.PUT} 
        isLoading={this.state.isLoading}/>
    );
  }
}

class CandidateIndexSheet extends Sheet {
  constructor(props) {
    super(props);
  //  this.bindClicks(props.candidates, this.selectCandidate);
  }

  componentWillUpdate(nextProps, nextState) {
    if (this.props.candidates != nextProps.candidates) {
      this.bindClicks(nextProps.candidates, this.selectCandidate);
    }
  }


  selectCandidate(candidate, e) {
    e.preventDefault();

    this.props.onSelectCandidate(candidate);
  }
  
  renderChildren() {
    let self = this;
    //alert(JSON.stringify(this.props.candidates[0]));
    return (
      <ul>
        {this.props.candidates.map((candidate, pos) => {
            return (<li key={candidate.uuid} onClick={this.onClicks[pos]}><CandidateItem candidate={candidate} /></li>);
        })}
      </ul>
     );
   }

  renderNone() {
    return (
      <h2 key="no-cand">No Candidates yet</h2>
    );
  }

  render() {
    return(
      <div className="index-sheet">
        { this.props.candidates ? this.renderChildren() : this.renderNone() }
      </div>
    );
  }
}

class CandidateShowSheet extends Sheet {
  constructor(props) {
    super(props);
    this.onClick = this.props.onUnselectCandidate;

  }
  editMe(e) {
    e.preventDefault();
    this.props.onSetAction('Edit');
  }

  render() {
    if (!this.props.candidate) {
      return (
        <div className="show-sheet">
          <h2 key="no-candidate">No Candidate?</h2>
        </div>
      );
    }
    //alert(this.props.candidate.uuid);
    return(
      <div className="show-sheet">
        <div className="hidden-sm-up" onClick={this.onClick}><Pyr.Icon name="close"/></div>
        <CandidateItem candidate={this.props.candidate} />
      </div>
    );
  }
}

class CandidateNewSheet extends Sheet {

  render() { 
    return ( 
      <CandidateForm onPreSubmit={this.onPreSubmit} postSubmit={this.postSubmit} />
    );
  }
}

class CandidatesPage extends Component {
  constructor(props) {
    super(props);

    this.state = {
      candidate: null,
      action: null,
      job: this.props.job, // placeholder until we can fetch the full one
      fullDetail: false
    };

    this.onSelectCandidate = this.selectCandidate.bind(this);
    this.onUnselectCandidate = this.selectCandidate.bind(this, null);
    this.onSetAction = this.setAction.bind(this);
  }

  getJob(jobId) {
    let params = [{"cand": 1}];

    $.getJSON({
      type: Pyr.Method.GET,
      url: JOBS_URL + "/" + jobId + "?cand=1",   //+ $.param(params),
       context: this

    }).done((data, textStatus, jaXHR) => {
      this.onJobLoad(data.job);

    }).fail((jaXHR, textStatus, errorThrown) => {
      ajaxError(jaXHR, textStatus, errorThrown);

    });
  }

  onJobLoad(job) {
    this.setState({job: job});
  }

  componentDidUpdate(prevProps, prevState) {
     //alert("Did Update");
    //alert(this.props.job);
    if(this.props.job){
     // alert(this.props.job.uuid);
    }
    if (this.props.job && (!prevProps.job || (prevProps.job.uuid != this.props.job.uuid))) {
      this.getJob(this.props.job.id);
    }
  }

  name() {
    return "Candidate";
  }

  selectCandidate(candidate) {
    //alert("SELECTED " + candidate);
    this.setState({candidate: candidate});
  }

  setAction(action) {
    //alert("Set Acxtion" + action);
    this.setState({action});
  }

  renderItems(candidates, props) {
    let extraClass = "col-md-6";

    if (this.state.fullDetail) {
      extraClass = "hidden-xs-up";
    }
    else if (this.state.candidate) {
      extraClass = extraClass + " hidden-xs-down";
    }
    else if (!this.state.candidate) {
      extraClass = "col-md-12";
    }

    return (
      <ColumnHalf className={extraClass}>
        <CandidateIndexSheet {...props} candidates={candidates} onSelectCandidate={this.onSelectCandidate}/>
      </ColumnHalf>
    );
  }

  renderDetail(candidates, props) {
    let extraClass = "col-md-6";

    if (this.state.fullDetail) {
      extraClass = "col-md-12";
    }
    else if (!this.state.candidate) {
      extraClass = "hidden-xs-up";
    }

    let sheet = sheetComponent(this.name(), this.state.action || "Show");
    let ActionSheet = eval(sheet);

    return (
      <ColumnHalf className={extraClass}>
        <ActionSheet {...props} candidates={candidates} candidate={this.state.candidate} onSetAction={this.onSetAction} onUnselectCandidate={this.onUnselectCandidate}/>
      </ColumnHalf>
    );
  }

  render() {
    //alert(JSON.stringify(this.state.candidate));
    
    let candidates = this.state.job ? this.state.job.candidates : [];

    let sid = sheetID(this.name(), this.state.action);

    return(
      <Page id={sid} name="candidates" selected={this.props.selected}>
        <Row>
            { this.renderItems(candidates, this.props) }
            { this.renderDetail(candidates, this.props) }
        </Row>
      </Page>
    );
  }
}

const CandidateSideButton = (props) => (
  <label {...Pyr.Util.propsMergeClassName(props, "title")}>Candidates</label>
);


export default CandidatesPage;
export {
  CandidateSideButton
}

