<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>


import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Page, { sheetName } from '../page';
import { Row, Column, ColumnHalf } from '../container';

import Pyr from '../../pyr/pyr';

function ajaxError(jaXHR, textStatus, errorThrown) {
   alert(errorThrown);
}

class Sheet extends Component {
  constructor(props) {
    super(props);

    this.state = {isLoading: false};
  }

  preSubmit() {
    this.isLoading();
    if (this.props.preSubmit) {
      this.props.preSubmit();
    }
  }

  postSubmit() {
    this.isLoading(false);
    if (this.props.postSubmit) {
      this.props.postSubmit();
    }
  }

}

const JOBS_URL = "/jobs";

class CandidateItem extends Component {

  render() {
    let id = "candidate-" + this.props.candidate.id;

    return (
      <div id={id}>
        <h2>{this.props.candidate.first_name} {this.props.candidate.last_name}</h2>
      </div>
    );
  }
}

class CandidateForm extends Component {

  methodToName(method) {
    switch (method) {
      case Pyr.Method.PUT:
        return "Update";
        break

      default:
        return "Create";
        break;
    }
  }

  render() {
    let key = "candidate-form";
    let url = JOBS_URL;

    if (this.props.candidate){
      url = url + "/" + this.props.candidate.id;
      key = key + "-" + this.props.candidate.id;
    }

    let method = this.props.method || Pyr.Method.POST;

    //alert("Render FOrm Candidate " + this.props.candidate.id);


    return (
      <div id="candidate-page-form">
        <Pyr.Form.Form
          controller="Candidate"
          object={this.props.candidate}
          url={url}
          method={method}
          id="candidate-form" 
          key={key}
          ref={(node) => { this.form = node; }} 
          preSubmit={this.props.preSubmit} 
          postSubmit={this.props.postSubmit}
          onSuccess={this.props.onSuccess}
          onError={this.props.onError}
        >
      
          <Pyr.Form.Group name="title">
            <Pyr.Form.Label>Title</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder= "Enter candidate title"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="time_commit">
            <Pyr.Form.Label>Time Requirements</Pyr.Form.Label>
            <Pyr.Form.Select>
              <Pyr.Form.Option value="0">Full Time</Pyr.Form.Option>
              <Pyr.Form.Option value="1">Part Time</Pyr.Form.Option>
              <Pyr.Form.Option value="2">Contractor</Pyr.Form.Option>
            </Pyr.Form.Select>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="description">
            <Pyr.Form.Label>Description</Pyr.Form.Label>
            <Pyr.Form.TextArea placeholder="Enter description" rows="10" />
          </Pyr.Form.Group>
      
        </Pyr.Form.Form>
      <div className="form-footer">
        <Pyr.Form.SubmitButton target={this} disabled={this.props.isLoading}>{this.methodToName(method)}</Pyr.Form.SubmitButton>
      </div>
      </div>
    );
  }
}

class CandidateEditSheet extends Sheet {
  handleSuccess(data, textStatus, jqXHR) {
    this.props.onCandidateUpdate(data.candidate);
  }

  render() {
    //alert("JOB EDIT " + this.props.candidate.id);
    return (
      <CandidateForm 
        preSubmit={this.preSubmit} 
        postSubmit={this.postSubmit} 
        candidate={this.props.candidate} 
        onSuccess={this.handleSuccess.bind(this)}
        method={Pyr.Method.PUT} 
        isLoading={this.state.isLoading}/>
    );
  }
}

class CandidateIndexSheet extends Sheet {
  renderChildren() {
    let self = this;
    //alert(JSON.stringify(this.props.candidates[0]));
    return (
      <ul>
        {this.props.candidates.map((candidate) => {
          return (<li key={candidate.uuid} onClick={ (e) => { e.preventDefault(); self.props.setSelected(candidate); } } ><CandidateItem candidate={candidate} /></li>);
        })}
      </ul>
     );
   }

  renderNone() {
    return (
      <h2 key="no-cand">No Candidates yet</h2>
    );
  }

  render() {
    return(
      <div id="candidates-page">
        { this.props.candidates ? this.renderChildren() : this.renderNone() }
      </div>
    );
  }
}

class CandidateShowSheet extends Sheet {
  editMe(e) {
    e.preventDefault();
    this.props.setAction('Edit');
  }

  render() {
    if (!this.props.candidate) {
      return (
          <h2>No Candidate</h2>
      );
    }
    return(
      <a onClick={this.editMe.bind(this)}><CandidateItem candidate={this.props.candidate} /></a>
    );
  }
}

class CandidateNewSheet extends Sheet {

  render() { 
    return ( 
      <CandidateForm preSubmit={this.preSubmit} postSubmit={this.postSubmit} />
    );
  }
}

class CandidatesPage extends Component {
  constructor(props) {
    super(props);

    this.state = {
      selected: null,
      action: null,
      job: this.props.job // placeholder until we can fetch the full one
    };
  }

  getJob(jobId) {
    let params = [{"cand": 1}];

    $.getJSON({
      type: Pyr.Method.GET,
      url: JOBS_URL + "/" + jobId + "?cand=1",   //+ $.param(params),
       context: this

    }).done((data, textStatus, jaXHR) => {
      this.onJobLoad(data.job);

    }).fail((jaXHR, textStatus, errorThrown) => {
      ajaxError(jaXHR, textStatus, errorThrown);

    });
  }

  onJobLoad(job) {
    this.setState({job: job});
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.job && (!prevProps.job || (prevProps.job.uuid != this.props.job.uuid))) {
      this.getJob(this.props.job.id);
    }
  }

  name() {
    return "Candidate";
  }

  setSelected(selected) {
    //alert("SELECTED " + JSON.stringify(selected));
    this.setState({selected: selected});
  }

  setAction(action) {
    //alert("Set Acxtion" + action);
    this.setState({action});
  }

  renderItems(props) {
    let extraClass = "col-md-6";

    if (this.fullDetail) {
      extraClass = ".hidden-lg";
    }
    else if (!this.state.selected) {
      extraClass = "col-md-12";
    }
      
    return (
      <ColumnHalf className={extraClass}>
        <CandidateIndexSheet {...props} candidates={this.state.job ? this.state.job.candidates : []} setSelected={this.setSelected.bind(this)}/>
      </ColumnHalf>
    );
  }

  renderDetail(props) {
    let extraClass = "col-md-6";

    if (this.fullDetail) {
      extraClass = "col-md-12";
    }
    else if (!this.state.selected) {
      extraClass = ".hidden-lg";
    }

    let sheet = sheetName(this.name(), this.state.action || "Index");
    let ActionSheet = eval(sheet);

    //alert("RENDER " + sheet);

    return (
      <ColumnHalf className={extraClass}>
        <ActionSheet {...props} candidates={this.props.candidates} candidate={this.state.selected} setAction={this.setAction.bind(this)}/>
      </ColumnHalf>
    );
  }

  render() {
    //alert(JSON.stringify(this.state.selected));
    

    return(
      <Page id="{this.name().toLowerCase()}-page-{this.state.action.toLowerCase()}" {...this.props} name={this.name()}>
        <Row>
            { this.renderItems(this.props) }
            { this.renderDetail(this.props) }
        </Row>
      </Page>
    );
  }
}

const CandidateSideButton = (props) => (
  <label {...Pyr.Util.propsMergeClassName(props, "title")}>Candidates</label>
);


export default CandidatesPage;
export {
  CandidateSideButton
}

