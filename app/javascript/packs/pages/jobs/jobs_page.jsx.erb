<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>

import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Pyr, {
  ClassNames
}  from '../../pyr/pyr';

import Page from '../page';
import Sheet from '../sheet';


const JOBS_URL = "/jobs";

class JobItem extends Component {

  render() {
    let job = this.props.job;
    let id = "job-" + job.id;

    return (
      <div id={id}>
        <h2>{job.title}</h2>
        <h3>Location: {job.location}</h3>
        <h3>Time: {job.time_commit}</h3>
        <p>{job.description}</p>
      </div>
    );
  }
}

class JobForm extends Component {

  methodToName(method) {
    switch (method) {
      case Pyr.Method.PUT:
        return "Update";
        break

      default:
        return "Create";
        break;
    }
  }

  render() {
    let key = "job-form";
    let url = JOBS_URL;

    if (this.props.selected){
      url = url + "/" + this.props.selected.id;
      key = key + "-" + this.props.selected.id;
    }

    let method = this.props.method || Pyr.Method.POST;

    //alert("Render FOrm Job " + this.props.selected.id);


    return (
      <div className="form-parent">
        <Pyr.Form.Form
          controller="Job"
          object={this.props.selected}
          url={url}
          method={method}
          id="job-form" 
          key={key}
          ref={(node) => { this.form = node; }} 
          onPreSubmit={this.props.onPreSubmit} 
          onPostSubmit={this.props.onPostSubmit}
          onSuccess={this.props.onSuccess}
          onError={this.props.onError}
        >
      
          <Pyr.Form.Group name="title">
            <Pyr.Form.Label>Title</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder= "Enter job title"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="location">
            <Pyr.Form.Label>Location</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder="Enter location" className="auto-complete" data-source="<%= jobs_location_path %>"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="time_commit">
            <Pyr.Form.Label>Time Requirements</Pyr.Form.Label>
            <Pyr.Form.Select>
              <Pyr.Form.Option value="0">Full Time</Pyr.Form.Option>
              <Pyr.Form.Option value="1">Part Time</Pyr.Form.Option>
              <Pyr.Form.Option value="2">Contractor</Pyr.Form.Option>
            </Pyr.Form.Select>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="description">
            <Pyr.Form.Label>Description</Pyr.Form.Label>
            <Pyr.Form.TextArea placeholder="Enter description" rows="10" />
          </Pyr.Form.Group>
      
        </Pyr.Form.Form>
      <div className="form-footer">
        <Pyr.Form.SubmitButton target={this} disabled={this.props.isLoading}>{this.methodToName(method)}</Pyr.Form.SubmitButton>
      </div>
      </div>
    );
  }
}

class EditSheet extends Sheet.Edit {
  success(data, textStatus, jqXHR) {
    this.props.onJobUpdate(data.job);
  }

  renderForm() {
    //alert("JOB EDIT " + this.props.selected.id);
    return (
      <JobForm 
        onPreSubmit={this.onPreSubmit} 
        onPostSubmit={this.onPostSubmit} 
        job={this.props.selected} 
        onSuccess={this.onSuccess}
        method={Pyr.Method.PUT} 
        isLoading={this.state.isLoading}/>
    );
  }
}

class IndexSheet extends Sheet.Index {
  key(job) {
    return JobsPage.key(job);
  }

  renderItem(job, isSelected) {
    return (<JobItem job={job} selected={isSelected}/>)
  }

  key(job) {
    return JobsPage.key(job);
  }
}

class ShowSheet extends Sheet.Show {
  key(job) {
    return JobsPage.key(job);
  }

  renderItem(job, isSelected) {
    return (<JobItem job={job} selected={isSelected}/>)
  }
}

class NewSheet extends Sheet.New {

  success(data, textStatus, jqXHR) {
    this.props.onJobCreate(data.job);
  }

  renderForm() { 
    return ( 
      <JobForm 
        onPreSubmit={this.onPreSubmit} 
        onPostSubmit={this.onPostSubmit} 
        onSuccess={this.onSuccess}
      />
    );
  }
}

class JobsPage extends Page {
  getItems() {
    // nothing to see here
  }

  indexSheet() {
    return (
      <IndexSheet
        {...this.props}
        jobs={this.props.items}
        onSelect={this.onSelect}
      />
    );
  }

  actionSheet(action) {
    let sheet = Sheet.sheetComponent(action || "Show");
    let ActionSheet = eval(sheet);

    return (
      <ActionSheet
        {...this.props}
        jobs={this.props.items}
        selected={this.state.selected}
        onAction={this.onAction}
        onUnaction={this.onUnaction}
      />
    );

  }

}

function key(item) {
  return item.uuid;
}
JobsPage.key = key;
 

export default JobsPage;
