<% include Rails.application.routes.url_helpers %>
<% include Rails.application.helpers %>

import React, { 
  Component
} from 'react';

import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Page from '../page';
import { Row, Column, ColumnHalf } from '../container';

import Pyr from '../../pyr/pyr';

import Sheet, { ajaxError, sheetName } from '../sheet';

const JOBS_URL = "/jobs";

class JobItem extends Component {

  render() {
    let id = "job-" + this.props.job.id;

    return (
      <div id={id}>
        <h2>{this.props.job.title}</h2>
        <h3>Location: {this.props.job.location}</h3>
        <h3>Time: {this.props.job.time_commit}</h3>
        <p>{this.props.job.description}</p>
      </div>
    );
  }
}

class JobForm extends Component {

  methodToName(method) {
    switch (method) {
      case Pyr.Method.PUT:
        return "Update";
        break

      default:
        return "Create";
        break;
    }
  }

  render() {
    let key = "job-form";
    let url = JOBS_URL;

    if (this.props.job){
      url = url + "/" + this.props.job.id;
      key = key + "-" + this.props.job.id;
    }

    let method = this.props.method || Pyr.Method.POST;

    //alert("Render FOrm Job " + this.props.job.id);


    return (
      <div id="job-page-form">
        <Pyr.Form.Form
          controller="Job"
          object={this.props.job}
          url={url}
          method={method}
          id="job-form" 
          key={key}
          ref={(node) => { this.form = node; }} 
          onPreSubmit={this.props.onPreSubmit} 
          onPostSubmit={this.props.onPostSubmit}
          onSuccess={this.props.onSuccess}
          onError={this.props.onError}
        >
      
          <Pyr.Form.Group name="title">
            <Pyr.Form.Label>Title</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder= "Enter job title"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="location">
            <Pyr.Form.Label>Location</Pyr.Form.Label>
            <Pyr.Form.TextField placeholder="Enter location" className="auto-complete" data-source="<%= jobs_location_path %>"/>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="time_commit">
            <Pyr.Form.Label>Time Requirements</Pyr.Form.Label>
            <Pyr.Form.Select>
              <Pyr.Form.Option value="0">Full Time</Pyr.Form.Option>
              <Pyr.Form.Option value="1">Part Time</Pyr.Form.Option>
              <Pyr.Form.Option value="2">Contractor</Pyr.Form.Option>
            </Pyr.Form.Select>
          </Pyr.Form.Group>
      
          <Pyr.Form.Group name="description">
            <Pyr.Form.Label>Description</Pyr.Form.Label>
            <Pyr.Form.TextArea placeholder="Enter description" rows="10" />
          </Pyr.Form.Group>
      
        </Pyr.Form.Form>
      <div className="form-footer">
        <Pyr.Form.SubmitButton target={this} disabled={this.props.isLoading}>{this.methodToName(method)}</Pyr.Form.SubmitButton>
      </div>
      </div>
    );
  }
}

class JobEditSheet extends Sheet {
  success(data, textStatus, jqXHR) {
    this.props.onJobUpdate(data.job);
  }

  render() {
    //alert("JOB EDIT " + this.props.job.id);
    return (
      <JobForm 
        onPreSubmit={this.onPreSubmit} 
        onPostSubmit={this.onPostSubmit} 
        job={this.props.job} 
        onSuccess={this.success.bind(this)}
        method={Pyr.Method.PUT} 
        isLoading={this.state.isLoading}/>
    );
  }
}

class JobIndexSheet extends Sheet {
  constructor(props) {
    super(props);
  
    //this.bindClicks(props.jobs, this.setSelected);
  }

  setSelected(job, e) {
    //alert("SET SELECTED");
    e.preventDefault();

    this.props.setSelected(job);
  }

  componentWillUpdate(nextProps, nextState) {
    this.bindClicks(nextProps.jobs, this.setSelected);
  }

  renderChildren() {
    let self = this;
    return (
      <ul>
        {this.props.jobs.map((job, pos) => {
          return (<li key={job.uuid} onClick={this.onClicks[pos] } ><JobItem job={job} /></li>);
        })}
      </ul>
     );
   }

  renderNone() {
    return (
      <h2>No Jobs yet</h2>
    );
  }

  render() {
    return(
      <div id="jobs-page">
        { this.props.jobs ? this.renderChildren() : this.renderNone() }
      </div>
    );
  }
}

class JobShowSheet extends Sheet {
  constructor(props) {
    super(props);
    this.onClick = this.editMe.bind(this);
  }

  editMe(e) {
    e.preventDefault();
    this.props.onSetAction('Edit');
  }

  render() {
    if (!this.props.job) {
      return (
          <h2>No Job</h2>
      );
    }
    return(
      <a onClick={this.onClick}><JobItem job={this.props.job} /></a>
    );
  }
}

class JobNewSheet extends Sheet {

  render() { 
    return ( 
      <JobForm onPreSubmit={this.onPreSubmit} postSubmit={this.onPostSubmit} />
    );
  }
}

class JobsPage extends Component {
  constructor(props) {
    super(props);

    this.state = {
      selected: null,
      action: null,
    };
  }

  name() {
    return "Job";
  }

  setSelected(selected) {
    //alert("SELECTED " + JSON.stringify(selected));
    this.setState({selected: selected});
  }

  setAction(action) {
    //alert("Set Acxtion" + action);
    this.setState({action});
  }

  renderItems(props) {
    let extraClass = "col-md-6";

    if (this.fullDetail) {
      extraClass = "hidden-xs";
    }
    else if (!this.state.selected) {
      extraClass = "col-md-12";
    }
      
    return (
      <ColumnHalf className={extraClass}>
        <JobIndexSheet {...props} jobs={this.props.jobs} setSelected={this.setSelected.bind(this)}/>
      </ColumnHalf>
    );
  }

  renderDetail(props) {
    let extraClass = "col-md-6";

    if (this.fullDetail) {
      extraClass = "col-md-12";
    }
    else if (!this.state.selected) {
      extraClass = "hidden-lg";
    }

    let sheet = sheetName(this.name(), this.state.action || "Show");
    let ActionSheet = eval(sheet);

    //alert("RENDER " + sheet);

    return (
      <ColumnHalf className={extraClass}>
        <ActionSheet {...props} jobs={this.props.jobs} job={this.state.selected} onSetAction={this.setAction.bind(this)}/>
      </ColumnHalf>
    );
  }

  render() {
    //alert(JSON.stringify(this.state.selected));
    

    return(
      <Page id="{this.name().toLowerCase()}-page-{this.state.action.toLowerCase()}" {...this.props} name={this.name()}>
        <Row>
            { this.renderItems(this.props) }
            { this.renderDetail(this.props) }
        </Row>
      </Page>
    );
  }
}

const JobSideButton = (props) => (
  <label {...Pyr.Util.propsMergeClassName(props, "title")}>Jobs</label>
);


export default JobsPage;
export {
  JobSideButton
}

